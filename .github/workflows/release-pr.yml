name: Prepare Release PR

on:
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      force_level:
        description: "Forzar release: none/patch/minor/major"
        required: false
        default: "none"

permissions:
  contents: write
  pull-requests: write

jobs:
  prepare:
    # IMPORTANTE: expresión válida con ${{ }}
    if: ${{ ! contains(github.event.head_commit.message, 'chore(release)') }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12.10"

      - name: Git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Install python-semantic-release
        run: pip install --upgrade python-semantic-release

      - name: Create release branch
        run: |
          BRANCH="release/$(date +%Y%m%d-%H%M%S)"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          git checkout -b "$BRANCH"

      - name: Bump version (auto o forzado) — NO push/NO tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FORCE_LEVEL: ${{ inputs.force_level }}
        run: |
          set -e

          if [ "${FORCE_LEVEL:-none}" != "none" ]; then
            echo ">> Forzando bump ${FORCE_LEVEL}"
            python - <<'PY'
            import re, sys, pathlib, tomllib

            path = pathlib.Path("pyproject.toml")
            txt  = path.read_text(encoding="utf-8")
            data = tomllib.loads(txt)

            def get_ver(d):
                if "project" in d and "version" in d["project"]:
                    return d["project"]["version"]
                tp = d.get("tool", {}).get("poetry", {})
                return tp.get("version")

            old = get_ver(data)
            if not old:
                print("No se encontró version en [project] ni [tool.poetry]", file=sys.stderr)
                sys.exit(1)

            def bump(v, kind):
                m = re.fullmatch(r"(\d+)\.(\d+)\.(\d+)", v)
                if not m: raise SystemExit(f"Version no semver: {v}")
                M, mnr, p = map(int, m.groups())
                if kind == "major":
                    return f"{M+1}.0.0"
                if kind == "minor":
                    return f"{M}.{mnr+1}.0"
                return f"{M}.{mnr}.{p+1}"  # patch

            kind = "${FORCE_LEVEL}".lower()
            new = bump(old, kind)

            # Reemplazo simple de la primera ocurrencia exacta
            txt_new = txt.replace(f'version = "{old}"', f'version = "{new}"', 1)
            path.write_text(txt_new, encoding="utf-8")
            print(new, end="")
            PY
                        VERSION=$(python - <<'PY'
            import tomllib
            with open("pyproject.toml","rb") as f:
                d = tomllib.load(f)
            v = (d.get("project",{}) or d.get("tool",{}).get("poetry",{})).get("version","")
            print(v, end="")
            PY
            )
            echo "VERSION=$VERSION" >> $GITHUB_ENV

          else
            echo ">> Modo automático con python-semantic-release"
            semantic-release version --no-push --no-tag --no-vcs-release || true

            # Leer versión detectada (si hubo cambio)
            python - <<'PY' > .version
            import tomllib
            with open("pyproject.toml","rb") as f:
                d = tomllib.load(f)
            v = (d.get("project",{}) or d.get("tool",{}).get("poetry",{})).get("version","")
            print(v, end="")
            PY
            echo "VERSION=$(cat .version)" >> $GITHUB_ENV
          fi

          # Si hay diffs, commit explícito con el mensaje de release
          if ! git diff --quiet; then
            git add -A
            git commit -m "chore(release): v${VERSION}"
          fi

      - name: Check if branch differs from main
        run: |
          git fetch origin main
          if git diff --quiet origin/main...HEAD; then
            echo "NO_CHANGES=1" >> $GITHUB_ENV
            echo "No hay cambios vs main; se omite PR."
          else
            echo "NO_CHANGES=0" >> $GITHUB_ENV
          fi

      - name: Push branch
        if: ${{ env.NO_CHANGES == '0' }}
        run: git push --set-upstream origin "$BRANCH"

      - name: Open PR
        if: ${{ env.NO_CHANGES == '0' }}
        id: pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create \
            --base main \
            --head "$BRANCH" \
            --title "chore(release): v${VERSION}" \
            --body "Automated release PR for v${VERSION}"
          PR=$(gh pr view "$BRANCH" --json number -q .number)
          echo "PR_NUMBER=$PR" >> $GITHUB_ENV

      - name: Approve PR
        if: ${{ env.NO_CHANGES == '0' && env.PR_NUMBER != '' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh pr review $PR_NUMBER --approve

      - name: Enable auto-merge (squash)
        if: ${{ env.NO_CHANGES == '0' && env.PR_NUMBER != '' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh pr merge $PR_NUMBER --auto --squash
